from telegram.ext import ApplicationBuilder, ContextTypes, CallbackContext, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from configuration import TELEGRAM_TOKEN


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n", parse_mode="Markdown")
    if ("step" not in context.user_data or context.user_data['step'] == 'name'):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    elif context.user_data['step'] == 'birthday_day':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:")
    elif context.user_data['step'] == 'birthday_month':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:")
    elif context.user_data['step'] == 'press_button':
        await update.message.reply_text("–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–æ—Ä—Ç–∏–∫–æ–º......")
    elif context.user_data['step'] == 'cake':
        if 'restart' in context.user_data:
            await update.message.reply_text("GG")
            await update.message.reply_text("/restart123", parse_mode='Markdown')
            await update.message.reply_text("/sus", parse_mode='Markdown')
        else:
            await update.message.reply_text("–ê–∞–∞–∞–∞–∞–∞–∞–∞–∞—É—É—É—É–µ–µ–µ–µ–µ –≤—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É. –ù–æ —á—Ç–æ –µ—Å–ª–∏ –≤—Å–µ —Å–ª–æ–º–∞—Ç—å...")
            await update.message.reply_text("/restart123", parse_mode='Markdown')


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, —ç—Ç–æ —Å—É–ø–µ—Ä –±–æ—Ç")

    if 'step' not in context.user_data:
        context.user_data['step'] = 'name'
        context.user_data['attempts'] = 0
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    elif context.user_data['step'] == 'cake':
        await update.message.reply_text("–ò–º–µ–Ω–∏–Ω–Ω–∏–∫ ü§≠")
    else:
        await update.message.reply_text("–ó–∞–±–ª—É–¥–∏–ª–∏—Å—å? –ñ–º–∏—Ç–µ /help", parse_mode="Markdown")



WRONG = "–û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"
CORRECT = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: CallbackContext) -> None:
    if 'step' not in context.user_data:
        context.user_data['step'] = 'name'
        context.user_data['attempts'] = 0

    step = context.user_data['step']
    message_text = str.lower(update.message.text)

    if step == 'name':
        if (message_text == "–∞—Ä—Ç–µ–º"):
            await update.message.reply_text(CORRECT)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:")
            context.user_data['step'] = 'birthday_day'
            context.user_data['attempts'] = 0
        else:
            context.user_data['attempts'] += 1
            await update.message.reply_text(WRONG)
            if context.user_data['attempts'] == 3:
                await update.message.reply_text("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ê****")
            if context.user_data['attempts'] == 4:
                await update.message.reply_text("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ê**–µ*")
            if context.user_data['attempts'] == 7:
                await update.message.reply_text("–ü–æ–º—è–Ω–µ–º... –õ–∞–¥–Ω–æ, –ê—Ä—Ç–µ–º, –ø—Ä–æ–µ—Ö–∞–ª–∏...")
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:")
                context.user_data['step'] = 'birthday_day'
                context.user_data['attempts'] = 0

    elif step == 'birthday_day':
        if (message_text == "1" or message_text == "01" or message_text == "–ø–µ—Ä–≤–æ–≥–æ" or message_text == "–æ–¥–∏–Ω" or message_text == "–ø–µ—Ä–≤–æ–µ"):
            await update.message.reply_text(CORRECT)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:")
            context.user_data['step'] = 'birthday_month'
            context.user_data['attempts'] = 0
        else:
            if (context.user_data['attempts'] == 0):
                context.user_data['attempts'] += 1
                await update.message.reply_text(WRONG)
                await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è –≤—ã –∑–∞–±—ã–ª–∏ –¥–µ–Ω—å —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–µ –æ—Å—É–∂–¥–∞–µ–º. –ù–∞–ø–æ–º–Ω–∏–º: –ø–µ—Ä–≤–æ–µ")
            else:
                await update.message.reply_text(WRONG)
                await update.message.reply_text("–í—ã dur... –õ–∞–¥–Ω–æ....")
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:")
                context.user_data['step'] = 'birthday_month'
                context.user_data['attempts'] = 0

    elif step == 'birthday_month':
        if (message_text == "11" or message_text == "–Ω–æ—è–±—Ä—å" or message_text == "–Ω–æ—è–±—Ä—è" or message_text == "–ø–µ—Ä–≤–æ–µ"):
            await update.message.reply_text(CORRECT)
            step = 'cake'
            context.user_data['step'] = step
            context.user_data['attempts'] = 0
        else:
            if (context.user_data['attempts'] == 0):
                context.user_data['attempts'] += 1
                await update.message.reply_text(WRONG)
                await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è –≤—ã –∑–∞–±—ã–ª–∏ –º–µ—Å—è—Ü —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–µ –æ—Å—É–∂–¥–∞–µ–º. –ù–∞–ø–æ–º–Ω–∏–º: –Ω–æ—è**—å")
            else:
                await update.message.reply_text(WRONG)
                await context.bot.send_photo(chat_id=update.message.chat_id, photo=open('dur.jpg', 'rb'))
                await update.message.reply_text("–ù–û–Ø–ë–†–¨!!! –ü–ï–†–í–û–ï –ù–û–Ø–ë–†–Ø!!")
                context.user_data['step'] = 'press_button'
                context.user_data['attempts'] = 0
                await cake_button(update, context)

    elif step == 'press_button':
        context.user_data['attempts'] += 1
        if context.user_data['attempts'] % 2:
            await update.message.reply_text("–ñ–º–∏!!")
        if not context.user_data['attempts'] % 2:
            await update.message.reply_text("–ù–µ —Ç—É–ø–∏, —Å–Ω–∏–∫–µ—Ä—Å–Ω–∏")
        if not context.user_data['attempts'] % 3:
            await cake_button(update, context)

    if step == 'cake':
        context.user_data['attempts'] += 1
        await update.message.reply_text("–° –î–≠–†–≠–≠–≠–≠–≠–≠–≠–≠ " + str(context.user_data['attempts']) + " üéâ")
        await context.bot.send_sticker(chat_id=context._user_id, sticker="CAACAgQAAxkBAAPmZyUsJq09pfFqXXvyQTV_F3Ns_3oAAp0AA845CA3b09W6-b0_FDYE")
            

async def cake_button(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–∫—É—Å? üç∞", callback_data="cake")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text('–í—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–ª–∏.', reply_markup=reply_markup, parse_mode='Markdown')



async def cake(update: Update, context: CallbackContext, choice=None):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        choice = query.data
    else:
        query = update.message
        choice = choice or query.text[1:]

    context.user_data['step'] = 'cake'
    context.user_data['attempts'] = 0
    await query.edit_message_text("–° –î–≠–≠–≠–≠–≠–†–≠–≠–≠–≠–≠–≠–≠–≠ üéâ")
    await context.bot.send_sticker(chat_id=context._user_id, sticker="CAACAgQAAxkBAAPmZyUsJq09pfFqXXvyQTV_F3Ns_3oAAp0AA845CA3b09W6-b0_FDYE")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def test(update: Update, context: CallbackContext) -> None:
    print(update.message.sticker.file_id)


async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ üòà")
    await context.bot.send_sticker(chat_id=context._user_id, sticker="CAACAgIAAxkBAAIC0mclNRtRIqeCh8f03mL9-JxFL2xUAAJqDwACLeBBSw95apK5o3GvNgQ")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    context.user_data['step'] = 'name'
    context.user_data['attempts'] = 0
    context.user_data['restart'] = 1

        
async def game_over(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ö–æ–Ω–µ—Ü)")
    await context.bot.send_sticker(chat_id=context._user_id, sticker="CAACAgIAAxkBAAIDKmclNpDKHVwk0fi-oDFhoYVx7OP1AAICAwACWAQ_Lq1uOA2MdIteNgQ")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #application.add_handler(MessageHandler(None, test))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(cake, pattern='^(cake)$'))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–∂–∞—Ç–∏–π
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("restart123", restart_command))
    application.add_handler(CommandHandler("sus", game_over))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
